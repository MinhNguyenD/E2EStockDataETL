{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "minhdataingestfactory"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"HttpServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HttpServer1'"
		},
		"datalakestorage_link_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'datalakestorage_link'"
		},
		"storagesource_link_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'storagesource_link'"
		},
		"AzureSynapseWarehouse_link_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSynapseWarehouse_link'"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0930-204801-mvslvzfz"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://financialmodelingprep.com/api/v3/@{linkedService().path}?apikey=@{linkedService().apiKey}&@{linkedService().query}"
		},
		"HttpServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "datafactadmin"
		},
		"datalakestorage_link_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataengineerlakestorage.dfs.core.windows.net/"
		},
		"AzureSynapseWarehouse_link_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "minh-data-engineer-synapse.sql.azuresynapse.net"
		},
		"AzureSynapseWarehouse_link_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "stock_warehouse"
		},
		"AzureSynapseWarehouse_link_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladminuser"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-607201079975965.5.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"path": {
						"type": "string"
					},
					"apiKey": {
						"type": "string",
						"defaultValue": "7rPnDmy0O4hVrxTEa31u0aqwYFnTyKmj"
					},
					"query": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HttpServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HttpServer1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakestorage_link')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalakestorage_link_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('datalakestorage_link_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storagesource_link')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('storagesource_link_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseWarehouse_link')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('AzureSynapseWarehouse_link_properties_typeProperties_server')]",
					"database": "[parameters('AzureSynapseWarehouse_link_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSynapseWarehouse_link_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSynapseWarehouse_link_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_pipeline_profit_growth')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Profit Growth ETL",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mn549239@dal.ca/profit_growth_analysis"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transformation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_pipeline_valuation_over_time')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Valuation Over Time ETL",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mn549239@dal.ca/valuation_over_time_analysis"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transformation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_pipeline_voltality_risk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Voltality Risk ETL",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/mn549239@dal.ca/voltality_risk_analysis"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transformation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_datalake_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestorage_link",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestorage_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_datalake_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestorage_link",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "stage"
					},
					"columnDelimiter": ",",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestorage_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stocks_api_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference",
					"parameters": {
						"path": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"apiKey": "7rPnDmy0O4hVrxTEa31u0aqwYFnTyKmj",
						"query": {
							"value": "@dataset().query",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"path": {
						"type": "string"
					},
					"query": {
						"type": "string",
						"defaultValue": "\"\""
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagesource_link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "stocksource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Open",
						"type": "String"
					},
					{
						"name": "High",
						"type": "String"
					},
					{
						"name": "Low",
						"type": "String"
					},
					{
						"name": "Close",
						"type": "String"
					},
					{
						"name": "Adj Close",
						"type": "String"
					},
					{
						"name": "Volume",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagesource_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapse_warehouse_valuation_comparision_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseWarehouse_link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avg_peRatio",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_priceToSalesRatio",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_pbRatio",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_marketCap",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_enterpriseValue",
						"type": "float",
						"precision": 15
					},
					{
						"name": "pe_change",
						"type": "float",
						"precision": 15
					},
					{
						"name": "priceToSales_change",
						"type": "float",
						"precision": 15
					},
					{
						"name": "marketCap_change",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "valuation_comparison"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseWarehouse_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/processed_datalake_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestorage_link",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "year",
						"type": "INT_32"
					},
					{
						"name": "Avg Revenue Growth",
						"type": "DOUBLE"
					},
					{
						"name": "Avg Net Income Growth",
						"type": "DOUBLE"
					},
					{
						"name": "Avg Gross Margin",
						"type": "DOUBLE"
					},
					{
						"name": "Avg Operating Margin",
						"type": "DOUBLE"
					},
					{
						"name": "Avg Net Profit Margin",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestorage_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapse_warehouse_profit_growth_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseWarehouse_link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Avg_Revenue_Growth",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avg_Net_Income_Growth",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avg_Gross_Margin",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avg_Operating_Margin",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avg_Net_Profit_Margin",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ProfitabilityGrowthAnalysis"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseWarehouse_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapse_warehouse_voltality_risk_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseWarehouse_link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "symbol",
						"type": "nvarchar"
					},
					{
						"name": "volatility",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_marketCap",
						"type": "float",
						"precision": 15
					},
					{
						"name": "avg_pe",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VaR",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VolatilityRiskAnalysis"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseWarehouse_link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingestion_pipeline_storage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Loop through each file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "Switch File Name",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@replace(item().name, '.','')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "indexDatacsv",
												"activities": [
													{
														"name": "Copy data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": {
																		"value": "@item().name",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "FlattenHierarchy"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".csv"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "storage_dataset",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "raw_datalake_dataset",
																"type": "DatasetReference",
																"parameters": {
																	"folderPath": {
																		"value": "@replace(item().name,'.csv', '')",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "indexInfocsv",
												"activities": [
													{
														"name": "Copy data2",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "indexInfo.csv",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "FlattenHierarchy"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".csv"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "storage_dataset",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "raw_datalake_dataset",
																"type": "DatasetReference",
																"parameters": {
																	"folderPath": "@replace(item().name,'.csv', '')"
																}
															}
														]
													}
												]
											},
											{
												"value": "indexProcessedcsv",
												"activities": [
													{
														"name": "Copy data3",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "indexProcessed.csv",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "FlattenHierarchy"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".csv"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "storage_dataset",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "raw_datalake_dataset",
																"type": "DatasetReference",
																"parameters": {
																	"folderPath": "@replace(item().name,'.csv', '')"
																}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ingestion"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-28T03:50:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_dataset')]",
				"[concat(variables('factoryId'), '/datasets/raw_datalake_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historicalprice_cleansing_ingestion_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stage_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          symbol as string,",
						"          date as date,",
						"          open as double,",
						"          high as double,",
						"          low as double,",
						"          close as double,",
						"          adjClose as double,",
						"          volume as integer,",
						"          unadjustedVolume as integer,",
						"          change as double,",
						"          changePercent as double,",
						"          vwap as double,",
						"          label as string,",
						"          changeOverTime as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          symbol,",
						"          date,",
						"          open,",
						"          high,",
						"          low,",
						"          close,",
						"          adjClose,",
						"          volume,",
						"          change,",
						"          changePercent,",
						"          vwap,",
						"          changeOverTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!isNull(date) && open >= 0 && high >= 0 && low >= 0 && close >= 0 && adjClose >= 0 && volume >= 0 && !isNull(change)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_datalake_dataset')]",
				"[concat(variables('factoryId'), '/datasets/stage_datalake_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incomestatement_cleansing_ingestion_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stage_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          symbol as string,",
						"          date as date,",
						"          Revenue as long,",
						"          {Revenue Growth} as string,",
						"          {Cost of Revenue} as long,",
						"          {Gross Profit} as long,",
						"          {R&D Expenses} as long,",
						"          {SG&A Expense} as long,",
						"          {Operating Expenses} as long,",
						"          {Operating Income} as long,",
						"          {Interest Expense} as long,",
						"          {Earnings before Tax} as long,",
						"          {Income Tax Expense} as long,",
						"          {Net Income - Non-Controlling int} as string,",
						"          {Net Income - Discontinued ops} as string,",
						"          {Net Income} as long,",
						"          {Preferred Dividends} as string,",
						"          {Net Income Com} as long,",
						"          EPS as double,",
						"          {EPS Diluted} as double,",
						"          {Weighted Average Shs Out} as long,",
						"          {Weighted Average Shs Out (Dil)} as long,",
						"          {Dividend per Share} as string,",
						"          {Gross Margin} as double,",
						"          {EBITDA Margin} as double,",
						"          {EBIT Margin} as string,",
						"          {Profit Margin} as double,",
						"          {Free Cash Flow margin} as string,",
						"          EBITDA as long,",
						"          EBIT as long,",
						"          {Consolidated Income} as string,",
						"          {Earnings Before Tax Margin} as double,",
						"          {Net Profit Margin} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          symbol,",
						"          date,",
						"          Revenue,",
						"          {Revenue Growth},",
						"          {Gross Profit},",
						"          {Operating Income},",
						"          {Net Income},",
						"          EPS,",
						"          {EBITDA Margin},",
						"          EBITDA,",
						"          {Net Profit Margin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!isNull(Revenue) && !isNull({Net Income}) && !isNull(EPS)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_datalake_dataset')]",
				"[concat(variables('factoryId'), '/datasets/stage_datalake_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/keymetrics_cleansing_ingestion_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stage_datalake_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          symbol as string,",
						"          date as date,",
						"          calendarYear as short,",
						"          period as string,",
						"          revenuePerShare as double,",
						"          netIncomePerShare as double,",
						"          operatingCashFlowPerShare as double,",
						"          freeCashFlowPerShare as double,",
						"          cashPerShare as double,",
						"          bookValuePerShare as double,",
						"          tangibleBookValuePerShare as double,",
						"          shareholdersEquityPerShare as double,",
						"          interestDebtPerShare as double,",
						"          peRatio as double,",
						"          priceToSalesRatio as double,",
						"          pocfratio as double,",
						"          pfcfRatio as double,",
						"          pbRatio as double,",
						"          ptbRatio as double,",
						"          evToSales as double,",
						"          enterpriseValueOverEBITDA as double,",
						"          evToOperatingCashFlow as double,",
						"          evToFreeCashFlow as double,",
						"          earningsYield as double,",
						"          freeCashFlowYield as double,",
						"          debtToEquity as double,",
						"          debtToAssets as double,",
						"          netDebtToEBITDA as double,",
						"          currentRatio as double,",
						"          interestCoverage as double,",
						"          incomeQuality as double,",
						"          dividendYield as double,",
						"          payoutRatio as double,",
						"          salesGeneralAndAdministrativeToRevenue as double,",
						"          researchAndDdevelopementToRevenue as double,",
						"          intangiblesToTotalAssets as double,",
						"          capexToOperatingCashFlow as double,",
						"          capexToRevenue as double,",
						"          capexToDepreciation as double,",
						"          stockBasedCompensationToRevenue as double,",
						"          grahamNumber as double,",
						"          roic as double,",
						"          returnOnTangibleAssets as double,",
						"          grahamNetNet as double,",
						"          workingCapital as long,",
						"          tangibleAssetValue as long,",
						"          netCurrentAssetValue as long,",
						"          investedCapital as long,",
						"          averageReceivables as long,",
						"          averagePayables as long,",
						"          averageInventory as long,",
						"          daysSalesOutstanding as double,",
						"          daysPayablesOutstanding as double,",
						"          daysOfInventoryOnHand as double,",
						"          receivablesTurnover as double,",
						"          payablesTurnover as double,",
						"          inventoryTurnover as double,",
						"          roe as double,",
						"          capexPerShare as double,",
						"          marketCap as double,",
						"          enterpriseValue as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          symbol,",
						"          date,",
						"          revenuePerShare,",
						"          netIncomePerShare,",
						"          operatingCashFlowPerShare,",
						"          freeCashFlowPerShare,",
						"          cashPerShare,",
						"          peRatio,",
						"          priceToSalesRatio,",
						"          pbRatio,",
						"          debtToEquity,",
						"          currentRatio,",
						"          interestCoverage,",
						"          roe,",
						"          marketCap,",
						"          enterpriseValue,",
						"          bookValuePerShare,",
						"          roic",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!isNull(peRatio) && !isNull(netIncomePerShare) && !isNull(operatingCashFlowPerShare) && !isNull(revenuePerShare) && !isNull(freeCashFlowPerShare) && debtToEquity >= 0 && interestCoverage >= 0) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_datalake_dataset')]",
				"[concat(variables('factoryId'), '/datasets/stage_datalake_dataset')]"
			]
		}
	]
}